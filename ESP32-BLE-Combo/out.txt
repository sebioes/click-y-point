Project Path: ESP32-BLE-Combo-main

Source Tree:

```
ESP32-BLE-Combo-main
├── LICENSE
├── README.md
├── out.txt
├── BleDevice_Kbd.h
├── BleDevice_Mouse.h
├── BleDevice.cpp
└── BleDevice.h

```

`/home/leon/Arduino/ESP32-BLE-Combo-main/BleDevice_Kbd.h`:

```h
#ifndef ESP32_BLE_DEVICE_KBD_H
#define ESP32_BLE_DEVICE_KBD_H

#include "BleDevice.h"

#define BLE_KEYBOARD_VERSION "0.0.4"
#define BLE_KEYBOARD_VERSION_MAJOR 0
#define BLE_KEYBOARD_VERSION_MINOR 0
#define BLE_KEYBOARD_VERSION_REVISION 4

const uint8_t KEY_LEFT_CTRL = 0x80;
const uint8_t KEY_LEFT_SHIFT = 0x81;
const uint8_t KEY_LEFT_ALT = 0x82;
const uint8_t KEY_LEFT_GUI = 0x83;
const uint8_t KEY_RIGHT_CTRL = 0x84;
const uint8_t KEY_RIGHT_SHIFT = 0x85;
const uint8_t KEY_RIGHT_ALT = 0x86;
const uint8_t KEY_RIGHT_GUI = 0x87;

const uint8_t KEY_UP_ARROW = 0xDA;
const uint8_t KEY_DOWN_ARROW = 0xD9;
const uint8_t KEY_LEFT_ARROW = 0xD8;
const uint8_t KEY_RIGHT_ARROW = 0xD7;
const uint8_t KEY_BACKSPACE = 0xB2;
const uint8_t KEY_TAB = 0xB3;
const uint8_t KEY_RETURN = 0xB0;
const uint8_t KEY_ESC = 0xB1;
const uint8_t KEY_INSERT = 0xD1;
const uint8_t KEY_PRTSC = 0xCE;
const uint8_t KEY_DELETE = 0xD4;
const uint8_t KEY_PAGE_UP = 0xD3;
const uint8_t KEY_PAGE_DOWN = 0xD6;
const uint8_t KEY_HOME = 0xD2;
const uint8_t KEY_END = 0xD5;
const uint8_t KEY_CAPS_LOCK = 0xC1;
const uint8_t KEY_SCROLL_LOCK = 0xCF;
const uint8_t KEY_F1 = 0xC2;
const uint8_t KEY_F2 = 0xC3;
const uint8_t KEY_F3 = 0xC4;
const uint8_t KEY_F4 = 0xC5;
const uint8_t KEY_F5 = 0xC6;
const uint8_t KEY_F6 = 0xC7;
const uint8_t KEY_F7 = 0xC8;
const uint8_t KEY_F8 = 0xC9;
const uint8_t KEY_F9 = 0xCA;
const uint8_t KEY_F10 = 0xCB;
const uint8_t KEY_F11 = 0xCC;
const uint8_t KEY_F12 = 0xCD;
const uint8_t KEY_F13 = 0xF0;
const uint8_t KEY_F14 = 0xF1;
const uint8_t KEY_F15 = 0xF2;
const uint8_t KEY_F16 = 0xF3;
const uint8_t KEY_F17 = 0xF4;
const uint8_t KEY_F18 = 0xF5;
const uint8_t KEY_F19 = 0xF6;
const uint8_t KEY_F20 = 0xF7;
const uint8_t KEY_F21 = 0xF8;
const uint8_t KEY_F22 = 0xF9;
const uint8_t KEY_F23 = 0xFA;
const uint8_t KEY_F24 = 0xFB;

const uint8_t KEY_NUM_LOCK = 0xDB;
const uint8_t KEY_NUM_0 = 0xEA;
const uint8_t KEY_NUM_1 = 0xE1;
const uint8_t KEY_NUM_2 = 0xE2;
const uint8_t KEY_NUM_3 = 0xE3;
const uint8_t KEY_NUM_4 = 0xE4;
const uint8_t KEY_NUM_5 = 0xE5;
const uint8_t KEY_NUM_6 = 0xE6;
const uint8_t KEY_NUM_7 = 0xE7;
const uint8_t KEY_NUM_8 = 0xE8;
const uint8_t KEY_NUM_9 = 0xE9;
const uint8_t KEY_NUM_SLASH = 0xDC;
const uint8_t KEY_NUM_ASTERISK = 0xDD;
const uint8_t KEY_NUM_MINUS = 0xDE;
const uint8_t KEY_NUM_PLUS = 0xDF;
const uint8_t KEY_NUM_ENTER = 0xE0;
const uint8_t KEY_NUM_PERIOD = 0xEB;

const uint8_t LED_CAPS_LOCK = 0x02;
const uint8_t LED_NUM_LOCK = 0x01;
const uint8_t LED_SCROLL_LOCK = 0x04;

typedef uint8_t MediaKeyReport[2];

const MediaKeyReport KEY_MEDIA_NEXT_TRACK = {1, 0};
const MediaKeyReport KEY_MEDIA_PREVIOUS_TRACK = {2, 0};
const MediaKeyReport KEY_MEDIA_STOP = {4, 0};
const MediaKeyReport KEY_MEDIA_PLAY_PAUSE = {8, 0};
const MediaKeyReport KEY_MEDIA_MUTE = {16, 0};
const MediaKeyReport KEY_MEDIA_VOLUME_UP = {32, 0};
const MediaKeyReport KEY_MEDIA_VOLUME_DOWN = {64, 0};
const MediaKeyReport KEY_MEDIA_WWW_HOME = {128, 0};
const MediaKeyReport KEY_MEDIA_LOCAL_MACHINE_BROWSER = {0, 1}; // Opens "My Computer" on Windows
const MediaKeyReport KEY_MEDIA_CALCULATOR = {0, 2};
const MediaKeyReport KEY_MEDIA_WWW_BOOKMARKS = {0, 4};
const MediaKeyReport KEY_MEDIA_WWW_SEARCH = {0, 8};
const MediaKeyReport KEY_MEDIA_WWW_STOP = {0, 16};
const MediaKeyReport KEY_MEDIA_WWW_BACK = {0, 32};
const MediaKeyReport KEY_MEDIA_CONSUMER_CONTROL_CONFIGURATION = {0, 64}; // Media Selection
const MediaKeyReport KEY_MEDIA_EMAIL_READER = {0, 128};

//  Low level key report: up to 6 keys and shift, ctrl etc at once
typedef struct
{
  uint8_t modifiers;
  uint8_t reserved;
  uint8_t keys[6];
} KeyReport;

static const uint8_t _hidReportDescriptorKeyboard[] = {
  USAGE_PAGE(1),      0x01,          // USAGE_PAGE (Generic Desktop Ctrls)
  USAGE(1),           0x06,          // USAGE (Keyboard)
  COLLECTION(1),      0x01,          // COLLECTION (Application)
  // ------------------------------------------------- Keyboard
  REPORT_ID(1),       KEYBOARD_ID,   //   REPORT_ID (1)
  USAGE_PAGE(1),      0x07,          //   USAGE_PAGE (Kbrd/Keypad)
  USAGE_MINIMUM(1),   0xE0,          //   USAGE_MINIMUM (0xE0)
  USAGE_MAXIMUM(1),   0xE7,          //   USAGE_MAXIMUM (0xE7)
  LOGICAL_MINIMUM(1), 0x00,          //   LOGICAL_MINIMUM (0)
  LOGICAL_MAXIMUM(1), 0x01,          //   Logical Maximum (1)
  REPORT_SIZE(1),     0x01,          //   REPORT_SIZE (1)
  REPORT_COUNT(1),    0x08,          //   REPORT_COUNT (8)
  HIDINPUT(1),        0x02,          //   INPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  REPORT_COUNT(1),    0x01,          //   REPORT_COUNT (1) ; 1 byte (Reserved)
  REPORT_SIZE(1),     0x08,          //   REPORT_SIZE (8)
  HIDINPUT(1),        0x01,          //   INPUT (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  REPORT_COUNT(1),    0x05,          //   REPORT_COUNT (5) ; 5 bits (Num lock, Caps lock, Scroll lock, Compose, Kana)
  REPORT_SIZE(1),     0x01,          //   REPORT_SIZE (1)
  USAGE_PAGE(1),      0x08,          //   USAGE_PAGE (LEDs)
  USAGE_MINIMUM(1),   0x01,          //   USAGE_MINIMUM (0x01) ; Num Lock
  USAGE_MAXIMUM(1),   0x05,          //   USAGE_MAXIMUM (0x05) ; Kana
  HIDOUTPUT(1),       0x02,          //   OUTPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  REPORT_COUNT(1),    0x01,          //   REPORT_COUNT (1) ; 3 bits (Padding)
  REPORT_SIZE(1),     0x03,          //   REPORT_SIZE (3)
  HIDOUTPUT(1),       0x01,          //   OUTPUT (Const,Array,Abs,No Wrap,Linear,Preferred State,No Null Position,Non-volatile)
  REPORT_COUNT(1),    0x06,          //   REPORT_COUNT (6) ; 6 bytes (Keys)
  REPORT_SIZE(1),     0x08,          //   REPORT_SIZE(8)
  LOGICAL_MINIMUM(1), 0x00,          //   LOGICAL_MINIMUM(0)
  LOGICAL_MAXIMUM(1), 0x65,          //   LOGICAL_MAXIMUM(0x65) ; 101 keys
  USAGE_PAGE(1),      0x07,          //   USAGE_PAGE (Kbrd/Keypad)
  USAGE_MINIMUM(1),   0x00,          //   USAGE_MINIMUM (0)
  USAGE_MAXIMUM(1),   0x65,          //   USAGE_MAXIMUM (0x65)
  HIDINPUT(1),        0x00,          //   INPUT (Data,Array,Abs,No Wrap,Linear,Preferred State,No Null Position)
  END_COLLECTION(0),                 // END_COLLECTION
  // ------------------------------------------------- Media Keys
  USAGE_PAGE(1),      0x0C,          // USAGE_PAGE (Consumer)
  USAGE(1),           0x01,          // USAGE (Consumer Control)
  COLLECTION(1),      0x01,          // COLLECTION (Application)
  REPORT_ID(1),       MEDIA_KEYS_ID, //   REPORT_ID (3)
  USAGE_PAGE(1),      0x0C,          //   USAGE_PAGE (Consumer)
  LOGICAL_MINIMUM(1), 0x00,          //   LOGICAL_MINIMUM (0)
  LOGICAL_MAXIMUM(1), 0x01,          //   LOGICAL_MAXIMUM (1)
  REPORT_SIZE(1),     0x01,          //   REPORT_SIZE (1)
  REPORT_COUNT(1),    0x10,          //   REPORT_COUNT (16)
  USAGE(1),           0xB5,          //   USAGE (Scan Next Track)     ; bit 0: 1
  USAGE(1),           0xB6,          //   USAGE (Scan Previous Track) ; bit 1: 2
  USAGE(1),           0xB7,          //   USAGE (Stop)                ; bit 2: 4
  USAGE(1),           0xCD,          //   USAGE (Play/Pause)          ; bit 3: 8
  USAGE(1),           0xE2,          //   USAGE (Mute)                ; bit 4: 16
  USAGE(1),           0xE9,          //   USAGE (Volume Increment)    ; bit 5: 32
  USAGE(1),           0xEA,          //   USAGE (Volume Decrement)    ; bit 6: 64
  USAGE(2),           0x23, 0x02,    //   Usage (WWW Home)            ; bit 7: 128
  USAGE(2),           0x94, 0x01,    //   Usage (My Computer) ; bit 0: 1
  USAGE(2),           0x92, 0x01,    //   Usage (Calculator)  ; bit 1: 2
  USAGE(2),           0x2A, 0x02,    //   Usage (WWW fav)     ; bit 2: 4
  USAGE(2),           0x21, 0x02,    //   Usage (WWW search)  ; bit 3: 8
  USAGE(2),           0x26, 0x02,    //   Usage (WWW stop)    ; bit 4: 16
  USAGE(2),           0x24, 0x02,    //   Usage (WWW back)    ; bit 5: 32
  USAGE(2),           0x83, 0x01,    //   Usage (Media sel)   ; bit 6: 64
  USAGE(2),           0x8A, 0x01,    //   Usage (Mail)        ; bit 7: 128
  HIDINPUT(1),        0x02,          //   INPUT (Data,Var,Abs,No Wrap,Linear,Preferred State,No Null Position)
  END_COLLECTION(0)                  // END_COLLECTION
};

#define SHIFT 0x80
const uint8_t _asciimap[128] PROGMEM =
{
	0x00,             // NUL
	0x00,             // SOH
	0x00,             // STX
	0x00,             // ETX
	0x00,             // EOT
	0x00,             // ENQ
	0x00,             // ACK
	0x00,             // BEL
	0x2a,			// BS	Backspace
	0x2b,			// TAB	Tab
	0x28,			// LF	Enter
	0x00,             // VT
	0x00,             // FF
	0x00,             // CR
	0x00,             // SO
	0x00,             // SI
	0x00,             // DEL
	0x00,             // DC1
	0x00,             // DC2
	0x00,             // DC3
	0x00,             // DC4
	0x00,             // NAK
	0x00,             // SYN
	0x00,             // ETB
	0x00,             // CAN
	0x00,             // EM
	0x00,             // SUB
	0x00,             // ESC
	0x00,             // FS
	0x00,             // GS
	0x00,             // RS
	0x00,             // US

	0x2c,		   //  ' '
	0x1e|SHIFT,	   // !
	0x34|SHIFT,	   // "
	0x20|SHIFT,    // # //160 ok
	0x21|SHIFT,    // $
	0x22|SHIFT,    // %
	0x24|SHIFT,    // &
	0x34,          // '
	0x26|SHIFT,    // (
	0x27|SHIFT,    // )
	0x25|SHIFT,    // *
	0x2e|SHIFT,    // +
	0x36,          // , 
	0x2d,          // -
	0x37,          // .
	0x38,          // /
	0x27,          // 0
	0x1e,          // 1
	0x1f,          // 2
	0x20,          // 3
	0x21,          // 4
	0x22,          // 5
	0x23,          // 6
	0x24,          // 7
	0x25,          // 8
	0x26,          // 9
	0x33|SHIFT,    // :
	0x33,          // ;
	0x36|SHIFT,    // <
	0x2e,          // =
	0x37|SHIFT,      // >
	0x38|SHIFT,      // ?
	0x1f|SHIFT,      // @
	0x04|SHIFT,      // A
	0x05|SHIFT,      // B
	0x06|SHIFT,      // C
	0x07|SHIFT,      // D
	0x08|SHIFT,      // E
	0x09|SHIFT,      // F
	0x0a|SHIFT,      // G
	0x0b|SHIFT,      // H
	0x0c|SHIFT,      // I
	0x0d|SHIFT,      // J
	0x0e|SHIFT,      // K
	0x0f|SHIFT,      // L
	0x10|SHIFT,      // M
	0x11|SHIFT,      // N
	0x12|SHIFT,      // O
	0x13|SHIFT,      // P
	0x14|SHIFT,      // Q
	0x15|SHIFT,      // R
	0x16|SHIFT,      // S
	0x17|SHIFT,      // T
	0x18|SHIFT,      // U
	0x19|SHIFT,      // V
	0x1a|SHIFT,      // W
	0x1b|SHIFT,      // X
	0x1c|SHIFT,      // Y
	0x1d|SHIFT,      // Z
	0x2f,          // [
	0x31,          // bslash
	0x30,          // ]
	0x23|SHIFT,    // ^
	0x2d|SHIFT,    // _
	0x35,          // `
	0x04,          // a
	0x05,          // b
	0x06,          // c
	0x07,          // d
	0x08,          // e
	0x09,          // f
	0x0a,          // g
	0x0b,          // h
	0x0c,          // i
	0x0d,          // j
	0x0e,          // k
	0x0f,          // l
	0x10,          // m
	0x11,          // n
	0x12,          // o
	0x13,          // p
	0x14,          // q
	0x15,          // r
	0x16,          // s
	0x17,          // t
	0x18,          // u
	0x19,          // v
	0x1a,          // w
	0x1b,          // x
	0x1c,          // y
	0x1d,          // z
	0x2f|SHIFT,    // {
	0x31|SHIFT,    // |
	0x30|SHIFT,    // }
	0x35|SHIFT,    // ~
	0				// DEL
};

uint8_t USBPutChar(uint8_t c);

#endif

```

`/home/leon/Arduino/ESP32-BLE-Combo-main/BleDevice_Mouse.h`:

```h
#ifndef ESP32_BLE_DEVICE_MOUSE_H
#define ESP32_BLE_DEVICE_MOUSE_H

#include "BleDevice.h"

// Mouse buttons
#define MOUSE_LEFT    1
#define MOUSE_RIGHT   2
#define MOUSE_MIDDLE  4
#define MOUSE_BACK    8
#define MOUSE_FORWARD 16
#define MOUSE_ALL     (MOUSE_LEFT | MOUSE_RIGHT | MOUSE_MIDDLE | MOUSE_BACK | MOUSE_FORWARD) // For compatibility with the Mouse library

// Report IDs
#define MOUSE_RELATIVE_ID  0x01
#define MOUSE_ABSOLUTE_ID  0x02

static const uint8_t _hidReportDescriptorMouse[] PROGMEM = {
  // Report 1: Relative Movement
  0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
  0x09, 0x02,        // Usage (Mouse)
  0xA1, 0x01,        // Collection (Application)
  0x09, 0x01,        //   Usage (Pointer)
  0xA1, 0x00,        //   Collection (Physical)
  0x85, MOUSE_RELATIVE_ID, //     Report ID (1)
  // Buttons (Left, Right, Middle)
  0x05, 0x09,        //     Usage Page (Button)
  0x19, 0x01,        //     Usage Minimum (Button 1)
  0x29, 0x03,        //     Usage Maximum (Button 3)
  0x15, 0x00,        //     Logical Minimum (0)
  0x25, 0x01,        //     Logical Maximum (1)
  0x95, 0x03,        //     Report Count (3)
  0x75, 0x01,        //     Report Size (1)
  0x81, 0x02,        //     Input (Data,Var,Abs)
  // Padding
  0x95, 0x01,        //     Report Count (1)
  0x75, 0x05,        //     Report Size (5)
  0x81, 0x03,        //     Input (Constant,Var,Abs)
  // X and Y (Relative)
  0x05, 0x01,        //     Usage Page (Generic Desktop Ctrls)
  0x09, 0x30,        //     Usage (X)
  0x09, 0x31,        //     Usage (Y)
  0x09, 0x38,        //     Usage (Wheel)
  0x15, 0x81,        //     Logical Minimum (-127)
  0x25, 0x7F,        //     Logical Maximum (127)
  0x75, 0x08,        //     Report Size (8)
  0x95, 0x03,        //     Report Count (3)
  0x81, 0x06,        //     Input (Data,Var,Rel)
  // Horizontal Wheel
  0x05, 0x0C,        //     Usage Page (Consumer Devices)
  0x09, 0x38, 0x02,  //     Usage (AC Pan)
  0x15, 0x81,        //     Logical Minimum (-127)
  0x25, 0x7F,        //     Logical Maximum (127)
  0x75, 0x08,        //     Report Size (8)
  0x95, 0x01,        //     Report Count (1)
  0x81, 0x06,        //     Input (Data,Var,Rel)
  0xC0,              //   End Collection
  0xC0,              // End Collection

  // Report 2: Absolute Positioning
  0x05, 0x01,        // Usage Page (Generic Desktop Ctrls)
  0x09, 0x02,        // Usage (Mouse)
  0xA1, 0x01,        // Collection (Application)
  0x09, 0x01,        //   Usage (Pointer)
  0xA1, 0x00,        //   Collection (Physical)
  0x85, MOUSE_ABSOLUTE_ID, //     Report ID (2)
  // Buttons (Left, Right, Middle)
  0x05, 0x09,        //     Usage Page (Button)
  0x19, 0x01,        //     Usage Minimum (Button 1)
  0x29, 0x03,        //     Usage Maximum (Button 3)
  0x15, 0x00,        //     Logical Minimum (0)
  0x25, 0x01,        //     Logical Maximum (1)
  0x95, 0x03,        //     Report Count (3)
  0x75, 0x01,        //     Report Size (1)
  0x81, 0x02,        //     Input (Data,Var,Abs)
  // Padding
  0x95, 0x01,        //     Report Count (1)
  0x75, 0x05,        //     Report Size (5)
  0x81, 0x03,        //     Input (Constant,Var,Abs)
  // X and Y (Absolute)
  0x05, 0x01,        //     Usage Page (Generic Desktop Ctrls)
  0x09, 0x30,        //     Usage (X)
  0x09, 0x31,        //     Usage (Y)
  0x16, 0x00, 0x00,  //     Logical Minimum (0)
  0x26, 0xFF, 0x7F,  //     Logical Maximum (32767)
  0x36, 0x00, 0x00,  //     Physical Minimum (0)
  0x46, 0xFF, 0x7F,  //     Physical Maximum (32767)
  0x75, 0x10,        //     Report Size (16)
  0x95, 0x02,        //     Report Count (2)
  0x81, 0x02,        //     Input (Data,Var,Abs)
  0xC0,              //   End Collection
  0xC0               // End Collection
};

#endif


```

`/home/leon/Arduino/ESP32-BLE-Combo-main/BleDevice.cpp`:

```cpp
#include "BleDevice.h"

// constructor
BleDevice::BleDevice(std::string deviceName, std::string deviceManufacturer, esp_power_level_t pwrLevel, uint8_t batteryLevel ) 
    : hid(0), hid_mouse(0)
    , deviceName(std::string(deviceName).substr(0, 15))
    , deviceManufacturer(std::string(deviceManufacturer).substr(0,15))
    , pwrLevel(pwrLevel), batteryLevel(batteryLevel) {}

// methods
void BleDevice::begin(bool _enableMouse, bool _enableKeyboard)
{	
	enableMouse = _enableMouse; enableKeyboard = _enableKeyboard;

	BLEDevice::init(deviceName);
	BLEServer* pServer = BLEDevice::createServer(); // return the same server :( 
	pServer->setCallbacks(this);

	if( enableMouse ){
		hid_mouse = new BLEHIDDevice(pServer);
		inputMouse = hid_mouse->inputReport(MOUSE_RELATIVE_ID);  // <-- input REPORTID from report map
    inputMouseAbsolute = hid_mouse->inputReport(MOUSE_ABSOLUTE_ID);

		hid_mouse->manufacturer()->setValue(deviceManufacturer);
		hid_mouse->pnp(0x02, vid, pid, version);
		hid_mouse->hidInfo(0x00, 0x02);
	}

	if( enableKeyboard ){
		hid = new BLEHIDDevice(pServer);
		inputKeyboard = hid->inputReport(KEYBOARD_ID);  // <-- input REPORTID from report map
		outputKeyboard = hid->outputReport(KEYBOARD_ID);
		inputMediaKeys = hid->inputReport(MEDIA_KEYS_ID);
		outputKeyboard->setCallbacks(this);

		hid->manufacturer()->setValue(deviceManufacturer);
		hid->pnp(0x02, vid, pid, version);
		hid->hidInfo(0x00, 0x01);
	}
	
	// Passkey | Numerical | No-Input Pairing
	BLEDevice::setSecurityAuth(true, false, true);

	// Adjust powerlevel (default is 3db if commented out)
	BLEDevice::setPower(pwrLevel);

	// BLESecurity *pSecurity = new NimBLESecurity(); // NimBLE-Mouse does this
  	// pSecurity->setAuthenticationMode(ESP_LE_AUTH_BOND);

	if( enableMouse ){
		hid_mouse->reportMap((uint8_t*)_hidReportDescriptorMouse, sizeof(_hidReportDescriptorMouse));
		//oN ANDROID depend on what start first that will act first
		hid_mouse->startServices();
	}
	if( enableKeyboard ){
		hid->reportMap((uint8_t*)_hidReportDescriptorKeyboard, sizeof(_hidReportDescriptorKeyboard));
		hid->startServices();
	}

	onStarted(pServer);

	BLEAdvertising* advertising = pServer->getAdvertising();
	uint8_t icon = enableMouse && enableKeyboard ? GENERIC_HID : (enableMouse ? HID_MOUSE : HID_KEYBOARD);
	advertising->setAppearance(icon); 
	if( enableMouse )
		advertising->addServiceUUID(hid_mouse->hidService()->getUUID());
	if( enableKeyboard )
		advertising->addServiceUUID(hid->hidService()->getUUID());
	//   advertising->setScanResponse(true); // this wont work if you use multiple devices
	advertising->setScanResponse(false);
	//   advertising->setMinPreferred(0x06);  // functions that help with iPhone connections issue
	//   advertising->setMaxPreferred(0x12);	
	advertising->start();
	
	if( !enableKeyboard ) // attach to mouse if no keyboard, else attach to keyboard
		hid_mouse->setBatteryLevel(batteryLevel);
	else
		hid->setBatteryLevel(batteryLevel);
	// hid_mouse->setBatteryLevel(batteryLevel);

	ESP_LOGD(LOG_TAG, "Advertising started!");
	// vTaskDelay(portMAX_DELAY); //delay(portMAX_DELAY);
}

void BleDevice::end(bool clearAll)
{
	BLEDevice::stopAdvertising();
	BLEServer* pServer = BLEDevice::getServer();
	if (pServer->getConnectedCount() > 0){
		pServer->disconnect(pServer->getPeerIDInfo(0).getConnHandle());
	}
	// delete hid;
	// delete hid_mouse;
	BLEDevice::deinit(clearAll);
}

bool BleDevice::isConnected(void) {
  return this->connected;
}

void BleDevice::setBatteryLevel(uint8_t level) {
  this->batteryLevel = level;
  
  if (hid != 0){
	if( !enableKeyboard )
  		this->hid_mouse->setBatteryLevel(this->batteryLevel);
	else
		this->hid->setBatteryLevel(this->batteryLevel);
  }
    
}

//must be called before begin in order to set the name
void BleDevice::setName(std::string deviceName) {
  this->deviceName = deviceName;
}

/**
 * @brief Sets the waiting time (in milliseconds) between multiple keystrokes in NimBLE mode.
 * 
 * @param ms Time in milliseconds
 */
void BleDevice::setDelay(uint32_t ms) {
  this->_delay_ms = ms;
}

void BleDevice::setVendorID(uint16_t vid) { 
	this->vid = vid; 
}

void BleDevice::setProductID(uint16_t pid) { 
	this->pid = pid; 
}

void BleDevice::setVersion(uint16_t version) { 
	this->version = version; 
}

void BleDevice::sendReport(KeyReport* keys)
{
  if ( connected )
  {
    this->inputKeyboard->setValue((uint8_t*)keys, sizeof(KeyReport));
    this->inputKeyboard->notify();
    this->delay_ms(_delay_ms);
  }	
}

void BleDevice::sendReport(MediaKeyReport* keys)
{
  if ( connected )
  {
    this->inputMediaKeys->setValue((uint8_t*)keys, sizeof(MediaKeyReport));
    this->inputMediaKeys->notify();
    this->delay_ms(_delay_ms);
  }	
}

// press() adds the specified key (printing, non-printing, or modifier)
// to the persistent key report and sends the report.  Because of the way
// USB HID works, the host acts like the key remains pressed until we
// call release(), releaseAll(), or otherwise clear the report and resend.
size_t BleDevice::press(uint8_t k)
{
	if( !(enableKeyboard && connected) ) return 0;
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
		k = k - 136;
	} else if (k >= 128) {	// it's a modifier key
		_keyReport.modifiers |= (1<<(k-128));
		k = 0;
	} else {				// it's a printing key
		k = pgm_read_byte(_asciimap + k);
		if (!k) {
			setWriteError();
			return 0;
		}
		if (k & 0x80) {						// it's a capital letter or other character reached with shift
			_keyReport.modifiers |= 0x02;	// the left shift modifier
			k &= 0x7F;
		}
	}

	// Add k to the key report only if it's not already present
	// and if there is an empty slot.
	if (_keyReport.keys[0] != k && _keyReport.keys[1] != k &&
		_keyReport.keys[2] != k && _keyReport.keys[3] != k &&
		_keyReport.keys[4] != k && _keyReport.keys[5] != k) {

		for (i=0; i<6; i++) {
			if (_keyReport.keys[i] == 0x00) {
				_keyReport.keys[i] = k;
				break;
			}
		}
		if (i == 6) {
			setWriteError();
			return 0;
		}
	}
	sendReport(&_keyReport);
	return 1;
}

size_t BleDevice::press(const MediaKeyReport k)
{
	if( !(enableKeyboard && connected) ) return 0;
    uint16_t k_16 = k[1] | (k[0] << 8);
    uint16_t mediaKeyReport_16 = _mediaKeyReport[1] | (_mediaKeyReport[0] << 8);

    mediaKeyReport_16 |= k_16;
    _mediaKeyReport[0] = (uint8_t)((mediaKeyReport_16 & 0xFF00) >> 8);
    _mediaKeyReport[1] = (uint8_t)(mediaKeyReport_16 & 0x00FF);

	sendReport(&_mediaKeyReport);
	return 1;
}

// release() takes the specified key out of the persistent key report and
// sends the report.  This tells the OS the key is no longer pressed and that
// it shouldn't be repeated any more.
size_t BleDevice::release(uint8_t k)
{
	if( !(enableKeyboard && connected) ) return 0;
	uint8_t i;
	if (k >= 136) {			// it's a non-printing key (not a modifier)
		k = k - 136;
	} else if (k >= 128) {	// it's a modifier key
		_keyReport.modifiers &= ~(1<<(k-128));
		k = 0;
	} else {				// it's a printing key
		k = pgm_read_byte(_asciimap + k);
		if (!k) {
			return 0;
		}
		if (k & 0x80) {							// it's a capital letter or other character reached with shift
			_keyReport.modifiers &= ~(0x02);	// the left shift modifier
			k &= 0x7F;
		}
	}

	// Test the key report to see if k is present.  Clear it if it exists.
	// Check all positions in case the key is present more than once (which it shouldn't be)
	for (i=0; i<6; i++) {
		if (0 != k && _keyReport.keys[i] == k) {
			_keyReport.keys[i] = 0x00;
		}
	}

	sendReport(&_keyReport);
	return 1;
}

size_t BleDevice::release(const MediaKeyReport k)
{
	if( !(enableKeyboard && connected) ) return 0;
    uint16_t k_16 = k[1] | (k[0] << 8);
    uint16_t mediaKeyReport_16 = _mediaKeyReport[1] | (_mediaKeyReport[0] << 8);
    mediaKeyReport_16 &= ~k_16;
    _mediaKeyReport[0] = (uint8_t)((mediaKeyReport_16 & 0xFF00) >> 8);
    _mediaKeyReport[1] = (uint8_t)(mediaKeyReport_16 & 0x00FF);

	sendReport(&_mediaKeyReport);
	return 1;
}

void BleDevice::releaseAll(void)
{
	if( !(enableKeyboard && connected) ) return;
	_keyReport.keys[0] = 0;
	_keyReport.keys[1] = 0;
	_keyReport.keys[2] = 0;
	_keyReport.keys[3] = 0;
	_keyReport.keys[4] = 0;
	_keyReport.keys[5] = 0;
	_keyReport.modifiers = 0;
    _mediaKeyReport[0] = 0;
    _mediaKeyReport[1] = 0;
	sendReport(&_keyReport);
}

bool BleDevice::getLedStatus(uint8_t led)
{
	return (_keyboardLedsStatus & led) != 0;    
}

size_t BleDevice::write(uint8_t c)
{
	if( !(enableKeyboard && connected) ) return 0;
	uint8_t p = press(c);  // Keydown
	release(c);            // Keyup
	return p;              // just return the result of press() since release() almost always returns 1
}

size_t BleDevice::write(const MediaKeyReport c)
{
	if( !(enableKeyboard && connected) ) return 0;
	uint16_t p = press(c);  // Keydown
	release(c);            // Keyup
	return p;              // just return the result of press() since release() almost always returns 1
}

size_t BleDevice::write(const uint8_t *buffer, size_t size) {
	if( !(enableKeyboard && connected) ) return 0;
	size_t n = 0;
	while (size--) {
		if (*buffer != '\r') {
			if (write(*buffer)) {
			  n++;
			} else {
			  break;
			}
		}
		buffer++;
	}
	return n;
}

void BleDevice::click(uint8_t b)
{
	if( !(enableMouse && connected) ) return;
	_buttons = b;
	move(0,0,0,0);
	_buttons = 0;
	move(0,0,0,0);
}

void BleDevice::move(signed char x, signed char y, signed char wheel, signed char hWheel)
{
  if( !(enableMouse && connected) ) return;
  {
    uint8_t m[5];
    m[0] = _buttons;
    m[1] = x;
    m[2] = y;
    m[3] = wheel;
    m[4] = hWheel;
    this->inputMouse->setValue((uint8_t*)m, sizeof(m));
    this->inputMouse->notify();
    this->delay_ms(_delay_ms);
  }
}

void BleDevice::setPosition(uint16_t x, uint16_t y) {
    Serial.printf("Setting Position: X=%d, Y=%d\n", x, y);
    if (!(enableMouse && connected)) return;

    uint8_t m[5];
    m[0] = _buttons;            // Button states
    m[1] = x & 0xFF;            // Low byte of X position
    m[2] = (x >> 8) & 0xFF;     // High byte of X position
    m[3] = y & 0xFF;            // Low byte of Y position
    m[4] = (y >> 8) & 0xFF;     // High byte of Y position

    // Send as an absolute positioning report
    this->inputMouseAbsolute->setValue((uint8_t*)m, sizeof(m));
    this->inputMouseAbsolute->notify();
    this->delay_ms(_delay_ms);
}

void BleDevice::buttons(uint8_t b)
{
	if( !(enableMouse && connected) ) return;
	if (b != _buttons)
	{
		_buttons = b;
		move(0,0,0,0);
	}
}

void BleDevice::mousePress(uint8_t b)
{
	if( !(enableMouse && connected) ) return;
  	buttons(_buttons | b);
}

void BleDevice::mouseRelease(uint8_t b)
{
	if( !(enableMouse && connected) ) return;
  	buttons(_buttons & ~b);
}

bool BleDevice::isPressed(uint8_t b)
{
	if( !(enableMouse && connected) ) return false;
  	if ((b & _buttons) > 0)
    	return true;
  	return false;
}

void BleDevice::onStarted(BLEServer* pServer) {
}

void BleDevice::onConnect(BLEServer* pServer) {
  	// this->connected = pServer->getConnectedCount();
	this->connected = true;
	// pServer->getAdvertising()->start(); //do it :D

	// BLEDevice::getAddress();
	// BLEDevice::getDisconnectedClient();
	
	// pServer->disconnect(); // need test this

	// auto peer = pServer->getPeerInfo((this->connected)-1);

	// getConnHandle

	// }

	// ESP_LOGD(LOG_TAG, "Connected to: %d",peer.getAddress());
	// ESP_LOGD(LOG_TAG, "latency %d ms",peer.getConnLatency());
	// if(this->connected == 0){
		// BLEDevice::addIgnored(peer.getAddress());
	// ESP_LOGD(LOG_TAG, "Subscribed to Mouse: %d",inputMouse->getSubscribedCount());
		// inputMouse->setSubscribe(); //add or remove machine that connected 
	// }
	
	// delay_ms(10000);
	// pServer->disconnect(peer.getConnHandle());//CHECK IF NOT WHAT WE NEED ?
}
void BleDevice::onDisconnect(BLEServer* pServer) {
//   this->connected = false;
//   this->connected = pServer->getConnectedCount();
	this->connected = false;

	// reconnect ?


}

void BleDevice::onWrite(BLECharacteristic* me) {
	uint8_t* value = (uint8_t*)(me->getValue().c_str());
	(void)value;
	_keyboardLedsStatus = *value;
	ESP_LOGI(LOG_TAG, "special keys: %d", *value);
}

void BleDevice::delay_ms(uint64_t ms) {
	uint64_t m = esp_timer_get_time();
	if(ms){
		uint64_t e = (m + (ms * 1000));
		if(m > e){ //overflow
			while(esp_timer_get_time() > e) { taskYIELD();}
		}
		while(esp_timer_get_time() < e) {taskYIELD();}
	}
}

```

`/home/leon/Arduino/ESP32-BLE-Combo-main/BleDevice.h`:

```h
#ifndef ESP32_BLE_DEVICE_H
#define ESP32_BLE_DEVICE_H
#include "sdkconfig.h"

#include "NimBLECharacteristic.h"
#include "NimBLEHIDDevice.h"

#include <NimBLEDevice.h>
#include <NimBLEServer.h>
#include <NimBLEUtils.h>
#include <NimBLEHIDDevice.h>

#include "HIDTypes.h"
#include <driver/adc.h>
#include "sdkconfig.h"

#if defined(CONFIG_ARDUHAL_ESP_LOG)
  #include "esp32-hal-log.h"
  #define LOG_TAG ""
#else
  #include "esp_log.h"
  static const char* LOG_TAG = "BLEDevice";
#endif

#define BLEDevice                  NimBLEDevice
#define BLEServerCallbacks         NimBLEServerCallbacks
#define BLECharacteristicCallbacks NimBLECharacteristicCallbacks
#define BLEHIDDevice               NimBLEHIDDevice
#define BLECharacteristic          NimBLECharacteristic
#define BLEAdvertising             NimBLEAdvertising
#define BLEServer                  NimBLEServer

// Report IDs:
#define MOUSE_RELATIVE_ID  0x01
#define MOUSE_ABSOLUTE_ID  0x02
#define KEYBOARD_ID        0x03
#define MEDIA_KEYS_ID      0x04

#include "Print.h"

#include "BleDevice_Kbd.h"
#include "BleDevice_Mouse.h"

class BleDevice : public Print, public BLEServerCallbacks, public BLECharacteristicCallbacks
{
private:
  // mouse related
  BLEHIDDevice* hid_mouse;
  uint8_t _buttons; // mouse buttons
  BLECharacteristic* inputMouse;
  BLECharacteristic* inputMouseAbsolute; // For absolute positioning
  void buttons(uint8_t b);
  void rawAction(uint8_t msg[], char msgSize); // added 
  static void taskServer(void* pvParameter); // added 
  bool enableMouse = false;
  
  // keyboard related
  BLEHIDDevice* hid;
  BLECharacteristic* inputKeyboard;
  BLECharacteristic* outputKeyboard;
  BLECharacteristic* inputMediaKeys;
  // BLEAdvertising*    advertising;
  KeyReport          _keyReport;
  MediaKeyReport     _mediaKeyReport;
  std::string        deviceName;
  std::string        deviceManufacturer;
  uint8_t           _keyboardLedsStatus;
  uint8_t            batteryLevel;
  esp_power_level_t  pwrLevel;
  bool               connected = false;
  uint32_t           _delay_ms = 7;
  void delay_ms(uint64_t ms);
  bool enableKeyboard = false;

  uint16_t vid       = 0x05ac;
  uint16_t pid       = 0x820a;
  uint16_t version   = 0x0210;

public:
  // max power level ESP_PWR_LVL_N3=-3dB, ESP_PWR_LVL_N0=0dB, *ESP_PWR_LVL_P3=3dB, ESP_PWR_LVL_P6=6dB, ESP_PWR_LVL_P9=9dB
  BleDevice(std::string deviceName = "ESP32 Device", std::string deviceManufacturer = "Espressif", esp_power_level_t pwrLevel=ESP_PWR_LVL_P3, uint8_t batteryLevel=100 ) ;
  void init(void);
  void begin(bool _enableMouse=true, bool _enableKeyboard=true);
  void end(bool clearAll = false);
  void sendReport(KeyReport* keys);
  void sendReport(MediaKeyReport* keys);
  size_t press(uint8_t k);
  size_t press(const MediaKeyReport k);
  size_t release(uint8_t k);
  size_t release(const MediaKeyReport k);
  size_t write(uint8_t c);
  size_t write(const MediaKeyReport c);
  size_t write(const uint8_t *buffer, size_t size);
  void releaseAll(void);
  bool isConnected(void);
  bool getLedStatus(uint8_t led);
  void setBatteryLevel(uint8_t level);
  void setName(std::string deviceName);  
  void setDelay(uint32_t ms);

  void setVendorID(uint16_t vid);
  void setProductID(uint16_t pid);
  void setVersion(uint16_t version);

  // mouse specific
  void click(uint8_t b = MOUSE_LEFT);
  void move(signed char x, signed char y, signed char wheel = 0, signed char hWheel = 0);
  void setPosition(uint16_t x, uint16_t y); // Absolute movement
  void mousePress(uint8_t b = MOUSE_LEFT);   // press LEFT by default
  void mouseRelease(uint8_t b = MOUSE_LEFT); // release LEFT by default
  bool isPressed(uint8_t b = MOUSE_LEFT); // check LEFT by default

protected:
  virtual void onStarted(BLEServer *pServer);
  virtual void onConnect(BLEServer* pServer) override;
  virtual void onDisconnect(BLEServer* pServer) override;
  virtual void onWrite(BLECharacteristic* me) override;

};

#endif // ESP32_BLE_DEVICE_H

```